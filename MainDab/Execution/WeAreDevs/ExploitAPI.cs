using System;
using System.Diagnostics;
using System.IO;
using System.IO.Pipes;
using System.Linq;
using System.Net;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using Newtonsoft.Json.Linq;


namespace MainDabRedo.Execution.WeAreDevs
{
	public class ExploitAPI
	{
		[DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
		[return: MarshalAs(UnmanagedType.Bool)]
		private static extern bool WaitNamedPipe(string name, int timeout);

		WebClient WebStuff = new WebClient(); // Create a new generally used WebClient

		// Token: 0x06000003 RID: 3 RVA: 0x00002058 File Offset: 0x00000258
		public static bool NamedPipeExist(string pipeName)
		{
			bool result;
			try
			{
				int timeout = 0;
				if (!ExploitAPI.WaitNamedPipe(Path.GetFullPath(string.Format("\\\\.\\pipe\\{0}", pipeName)), timeout))
				{
					int lastWin32Error = Marshal.GetLastWin32Error();
					if (lastWin32Error == 0)
					{
						return false;
					}
					if (lastWin32Error == 2)
					{
						return false;
					}
				}
				result = true;
			}
			catch (Exception)
			{
				result = false;
			}
			return result;
		}

		// Token: 0x06000004 RID: 4 RVA: 0x000020B0 File Offset: 0x000002B0
		private void SMTP(string pipe, string input)
		{
			if (ExploitAPI.NamedPipeExist(pipe))
			{
				try
				{
					using (NamedPipeClientStream namedPipeClientStream = new NamedPipeClientStream(".", pipe, PipeDirection.Out))
					{
						namedPipeClientStream.Connect();
						using (StreamWriter streamWriter = new StreamWriter(namedPipeClientStream))
						{
							streamWriter.Write(input);
							streamWriter.Dispose();
						}
						namedPipeClientStream.Dispose();
					}
					return;
				}
				catch (IOException)
				{
					MessageBox.Show("[WeAreDevs API Error] Error occured sending message to the game! Join MainDab's Discord at discord.io/maindab if you require more help.", "MainDab");
					return;
				}
				catch (Exception ex)
				{
					MessageBox.Show(ex.Message.ToString());
					return;
				}
			}
			MessageBox.Show("WeAreDevs API Error] WeAreDevs API failed to inject properly. You can try and reopen Roblox and see if that fixes it. Join MainDab's Discord at discord.io/maindab if you require more help.", "MainDab");
		}

		// Token: 0x06000005 RID: 5 RVA: 0x0000217C File Offset: 0x0000037C
		private string ReadURL(string url)
		{
			return this.webClient.DownloadString(url);
		}

		// Token: 0x06000006 RID: 6 RVA: 0x0000218A File Offset: 0x0000038A
		private JObject GetWRDAPICONF()
		{
			if (this.WRDAPICONFCache == null)
			{
				if (!File.Exists("WRDAPICONF.json"))
				{
					File.WriteAllText("WRDAPICONF.json", "{}");
				}
				this.WRDAPICONFCache = JObject.Parse(File.ReadAllText("WRDAPICONF.json"));
			}
			return this.WRDAPICONFCache;
		}

		// Token: 0x06000007 RID: 7 RVA: 0x000021CC File Offset: 0x000003CC
		private JObject GetLatestData()
		{
				string Version = WebStuff.DownloadString("https://raw.githubusercontent.com/MainDabRblx/ProjectDab/master/UpdateStuff/UseWRDBackup");
				WebStuff.Dispose(); // Remember to dispose the WebClient! Or someone will scold me for it

				// .FirstOrDefault() is nessesary since GitHub always adds an extra line for some reason
				// If I don't do this, then the string that would return is "MainDab 14.3/n" rather than "MainDab 14.3", so basically an additional unwanted line!
				string OnlineVersion = Version.Split(new[] { '\r', '\n' }).FirstOrDefault();
				
				if(OnlineVersion == "Yes")
				{
				MessageBox.Show("WeAreDevs is currently having some issues now. MainDab will now use a backup data file to try and load up WeAreDevs API.", "MainDab");
					try
					{
						string text = null;
						text = this.ReadURL("https://raw.githubusercontent.com/MainDabRblx/ProjectDab/master/UpdateStuff/WRDBackup/WRDBackupData.json");
						this.latestDataCache = JObject.Parse(text);
					}
					catch
					{
					MessageBox.Show("MainDab is currently having issues loading up WeAreDevs API. Please select another API in the MainDab settings. MainDab may or may not crash after you click ok.", "MainDab");
					}	
				}
				else
				{
				if (this.latestDataCache == null)
				{
					string text = null;
					try
					{
						text = this.ReadURL("https://cdn.wearedevs.net/software/exploitapi/latestdata.json");
						this.latestDataCache = JObject.Parse(text);
					}
					catch
					{
						MessageBox.Show("An error has occured while attempting to grab data from WeAreDevs API. Please use another API.\n\n Join MainDab's Discord at discord.io/maindab if you need more help.", "MainDab");
						text = this.ReadURL("https://raw.githubusercontent.com/WeAreDevs-Official/backups/master/wrdeapi.json");
						this.latestDataCache = JObject.Parse(text);
					}
					if (text.Length <= 0)
					{
						text = this.ReadURL("https://raw.githubusercontent.com/WeAreDevs-Official/backups/master/wrdeapi.json");
						this.latestDataCache = JObject.Parse(text);
					}

				}
			}

				
				return this.latestDataCache;			
		}

		// Token: 0x06000008 RID: 8 RVA: 0x00002214 File Offset: 0x00000414
		public bool IsUpdated()
		{
			JObject latestData = this.GetLatestData();
			if (!latestData.HasValues)
			{
				MessageBox.Show("[WeAreDevs API Update Error] WeAreDevs API couldn't check for the latest version of the dll. Make sure that your firewall (or any other antiviruses) are disabled. Join MainDab's Discord at discord.io/maindab if you require more help.", "MainDab");
				return false;
			}
			return !(bool)latestData["exploit-module"]["patched"];
		}

		// Token: 0x06000009 RID: 9 RVA: 0x00002264 File Offset: 0x00000464
		private bool DownloadLatestVersion()
		{
			string text = (string)this.GetLatestData()["exploit-module"]["download"];
			if (text.Length > 0)
			{
				if (File.Exists("exploit-main.dll"))
				{
					File.Delete("exploit-main.dll");
				}
				this.webClient.DownloadFile(text, "exploit-main.dll");
			}
			return File.Exists("exploit-main.dll");
		}

		// Token: 0x0600000A RID: 10 RVA: 0x000022D0 File Offset: 0x000004D0
		private void Bootstrap()
		{
			JObject latestData = this.GetLatestData();
			JObject wrdapiconf = this.GetWRDAPICONF();
			if (!File.Exists("finj.exe"))
			{
				this.webClient.DownloadFile((string)latestData["qdRFzx_exe"], "finj.exe");
				wrdapiconf["finjVersion"] = (int)latestData["finjVersion"];
				File.WriteAllText("WRDAPICONF.json", wrdapiconf.ToString());
			}
			else if ((int)wrdapiconf["finjVersion"] < (int)latestData["finjVersion"])
			{
				try
				{
					if (File.Exists("finj.exe"))
					{
						File.Delete("finj.exe");
					}
					if (File.Exists("kernel64.sys.dll"))
					{
						File.Delete("kernel64.sys.dll");
					}
					this.webClient.DownloadFile((string)latestData["qdRFzx_exe"], "finj.exe");
					this.webClient.DownloadFile((string)latestData["injDep"], "kernel64.sys.dll");
					wrdapiconf["finjVersion"] = (int)latestData["finjVersion"];
					File.WriteAllText("WRDAPICONF.json", wrdapiconf.ToString());
				}
				catch
				{
				}
			}
			if (!File.Exists("kernel64.sys.dll"))
			{
				this.webClient.DownloadFile((string)latestData["injDep"], "kernel64.sys.dll");
			}
			if (File.Exists("old-WeAreDevs_API.dll"))
			{
				try
				{
					File.Delete("old-WeAreDevs_API.dll");
				}
				catch
				{
					MessageBox.Show("[WeAreDevs API Message] Downloaded the latest WeAreDevs_API.dll update. Please restart MainDab in order to use WeAreDevs API. Join MainDab's Discord at discord.io/maindab if you require more help.", "MainDab");
				
				}
			}
			if (!File.Exists("old-WeAreDevs_API.dll") && File.Exists("WeAreDevs_API.dll") && (int)latestData["csapi"]["version"] > this.WRDAPIVersion)
			{
				File.Move("WeAreDevs_API.dll", "old-WeAreDevs_API.dll");
				this.webClient.DownloadFile((string)latestData["csapi"]["download"], "WeAreDevs_API.dll");
				MessageBox.Show("WeAreDevs API Message] Downloaded the latest WeAreDevs_API.dll update. Please restart MainDab in order to use WeAreDevs API. Join MainDab's Discord at discord.io/maindab if you require more help.", "MainDab");
				this.updateForceRestart = true;
			}
			if (File.Exists("Module2.dll"))
			{
				try
				{
					File.Delete("Module2.dll");
				}
				catch
				{
				}
			}
			if (File.Exists("deleteme"))
			{
				try
				{
					File.Delete("deleteme");
				}
				catch
				{
				}
			}
			if (File.Exists("i.exe"))
			{
				try
				{
					File.Delete("qdRFzx.exe");
				}
				catch
				{
				}
			}
			if (File.Exists("qdRFzx.exe"))
			{
				try
				{
					File.Delete("qdRFzx.exe");
				}
				catch
				{
				}
			}
		}

		// Token: 0x0600000B RID: 11 RVA: 0x000025AC File Offset: 0x000007AC
		public bool isAPIAttached()
		{
			return ExploitAPI.NamedPipeExist(this.luapipe);
		}

		// Token: 0x0600000C RID: 12 RVA: 0x000025C0 File Offset: 0x000007C0
		public bool LaunchExploit()
		{
			this.Bootstrap();
			if (this.updateForceRestart)
			{
				MessageBox.Show("WeAreDevs API Message] Downloaded the latest WeAreDevs_API.dll update. Please restart MainDab in order to use WeAreDevs API. Join MainDab's Discord at discord.io/maindab if you require more help.", "MainDab");
				return false;
			}
			if (ExploitAPI.NamedPipeExist(this.luapipe))
			{
				return true;
			}
			if (!this.IsUpdated())
			{
				MessageBox.Show("[WeAreDevs API error] WeAreDevs API is currently patched (it should be fixed within a few hours). Join MainDab's Discord at discord.io/maindab if you require more help.", "MainDab");
			}
			if (!this.DownloadLatestVersion())
			{
				MessageBox.Show("[WeAreDevs API Message] The latest WeAreDevs_API.dll needs to be downloaded. Please restart MainDab in order to use WeAreDevs API. Join MainDab's Discord at discord.io/maindab if you require more help.", "MainDab");

			}
			if (!File.Exists("finj.exe"))
			{
				MessageBox.Show("[WeAreDevs API error] finj.exe was not found. This was due to your antivirus deleting it. This is needed for WeAreDevs API to inject. Please disable your antivirus and whitelist MainDab, then reopen MainDab. Join MainDab's Discord at discord.io/maindab if you require more help.", "MainDab");
				return false;
			}
			new Process
			{
				StartInfo = 
				{
					FileName = "finj.exe"
				}
			}.Start();
			return true;
		}

		// Token: 0x0600000E RID: 14 RVA: 0x0000269C File Offset: 0x0000089C
		

		// Token: 0x0600000F RID: 15 RVA: 0x00002708 File Offset: 0x00000908
		[Obsolete("SendScript is deprecated, please use SendLuaCScript instead.")]
		public void SendScript(string script)
		{
			this.SendLuaCScript(script);
		}

		// Token: 0x06000010 RID: 16 RVA: 0x00002714 File Offset: 0x00000914
		public void SendLuaCScript(string Script)
		{
			foreach (string input in Script.Split("\r\n".ToCharArray()))
			{
				try
				{
					this.SMTP(this.luacpipe, input);
				}
				catch (Exception ex)
				{
					MessageBox.Show("[WeAreDevs Execution Error] An error has occured during execution. The error is below:\n\n" + ex.Message.ToString() + "\n\nThis can probably be fixed by reopening both MainDab and Roblox. Join MainDab's Discord at discord.io/maindab if you require more help.");
				}
			}
		}

		// Token: 0x06000011 RID: 17 RVA: 0x00002778 File Offset: 0x00000978
		[Obsolete("SendLimitedLuaScript is deprecated, please use SendLuaScript instead.")]
		public void SendLimitedLuaScript(string script)
		{
			this.SendLuaScript(script);
		}

		// Token: 0x06000012 RID: 18 RVA: 0x00002781 File Offset: 0x00000981
		public void SendLuaScript(string Script)
		{
			this.SMTP(this.luapipe, Script);
		}

		// Token: 0x06000013 RID: 19 RVA: 0x00002790 File Offset: 0x00000990
		public void LuaC_getglobal(string service)
		{
			this.SendLuaCScript("getglobal " + service);
		}

		// Token: 0x06000014 RID: 20 RVA: 0x000027A3 File Offset: 0x000009A3
		public void LuaC_getfield(int index, string instance)
		{
			this.SendLuaCScript("getglobal " + index.ToString() + " " + instance);
		}

		// Token: 0x06000015 RID: 21 RVA: 0x000027C2 File Offset: 0x000009C2
		public void LuaC_setfield(int index, string property)
		{
			this.SendLuaCScript("setfield " + index.ToString() + " " + property);
		}

		// Token: 0x06000016 RID: 22 RVA: 0x000027E1 File Offset: 0x000009E1
		public void LuaC_pushvalue(int index)
		{
			this.SendLuaCScript("pushvalue " + index.ToString());
		}

		// Token: 0x06000017 RID: 23 RVA: 0x000027FA File Offset: 0x000009FA
		public void LuaC_pushstring(string text)
		{
			this.SendLuaCScript("pushstring " + text);
		}

		// Token: 0x06000018 RID: 24 RVA: 0x0000280D File Offset: 0x00000A0D
		public void LuaC_pushnumber(int number)
		{
			this.SendLuaCScript("pushnumber " + number.ToString());
		}

		// Token: 0x06000019 RID: 25 RVA: 0x00002828 File Offset: 0x00000A28
		public void LuaC_pcall(int numberOfArguments, int numberOfResults, int ErrorFunction)
		{
			this.SendLuaCScript(string.Concat(new string[]
			{
				"pushnumber ",
				numberOfArguments.ToString(),
				" ",
				numberOfResults.ToString(),
				" ",
				ErrorFunction.ToString()
			}));
		}

		// Token: 0x0600001A RID: 26 RVA: 0x0000287C File Offset: 0x00000A7C
		public void LuaC_settop(int index)
		{
			this.SendLuaCScript("settop " + index.ToString());
		}

		// Token: 0x0600001B RID: 27 RVA: 0x00002895 File Offset: 0x00000A95
		public void LuaC_pushboolean(string value = "false")
		{
			this.SendLuaCScript("pushboolean " + value);
		}

		// Token: 0x0600001C RID: 28 RVA: 0x000028A8 File Offset: 0x00000AA8
		public void LuaC_gettop()
		{
			this.SendLuaCScript("gettop");
		}

		// Token: 0x0600001D RID: 29 RVA: 0x000028B5 File Offset: 0x00000AB5
		public void LuaC_pushnil()
		{
			this.SendLuaCScript("pushnil");
		}

		// Token: 0x0600001E RID: 30 RVA: 0x000028C2 File Offset: 0x00000AC2
		public void LuaC_next(int index)
		{
			this.SendLuaCScript("next");
		}

		// Token: 0x0600001F RID: 31 RVA: 0x000028CF File Offset: 0x00000ACF
		public void LuaC_pop(int quantity)
		{
			this.SendLuaCScript("pop " + quantity.ToString());
		}

		// Token: 0x06000020 RID: 32 RVA: 0x000028E8 File Offset: 0x00000AE8
		public void DoBTools(string username = "me")
		{
			this.SendLuaScript("loadstring(game:HttpGet(\"https://cdn.wearedevs.net/scripts/BTools.txt\"))()");
		}

		// Token: 0x06000021 RID: 33 RVA: 0x000028F5 File Offset: 0x00000AF5
		public void Suicide(string username = "me")
		{
			this.SendLuaScript("game:GetService(\"Players\").LocalPlayer.Character:BreakJoints()");
		}

		// Token: 0x06000022 RID: 34 RVA: 0x00002902 File Offset: 0x00000B02
		public void AddForcefield(string username = "me")
		{
			this.SendLuaScript("Instance.new(\"ForceField\", game:GetService(\"Players\").LocalPlayer.Character)");
		}

		// Token: 0x06000023 RID: 35 RVA: 0x0000290F File Offset: 0x00000B0F
		public void RemoveForceField(string username = "me")
		{
			this.SendLuaScript("game:GetService(\"Players\").LocalPlayer.Character.ForceField:Destroy()");
		}

		// Token: 0x06000024 RID: 36 RVA: 0x0000291C File Offset: 0x00000B1C
		public void ToggleFloat(string username = "me")
		{
			this.SendLuaScript("loadstring(game:HttpGet(\"https://cdn.wearedevs.net/scripts/Float Character.txt\"))()");
		}

		// Token: 0x06000025 RID: 37 RVA: 0x00002929 File Offset: 0x00000B29
		public void RemoveLimbs(string username = "me")
		{
			this.SendLuaScript("loadstring(game:HttpGet(\"https://cdn.wearedevs.net/scripts/Remove Arms.txt\"))()");
			this.SendLuaScript("loadstring(game:HttpGet(\"https://cdn.wearedevs.net/scripts/Remove Legs.txt\"))()");
		}

		// Token: 0x06000026 RID: 38 RVA: 0x00002941 File Offset: 0x00000B41
		public void RemoveArms(string username = "me")
		{
			this.SendLuaScript("loadstring(game:HttpGet(\"https://cdn.wearedevs.net/scripts/Remove Arms.txt\"))()");
		}

		// Token: 0x06000027 RID: 39 RVA: 0x0000294E File Offset: 0x00000B4E
		public void RemoveLegs(string username = "me")
		{
			this.SendLuaScript("loadstring(game:HttpGet(\"https://cdn.wearedevs.net/scripts/Remove Legs.txt\"))()");
		}

		// Token: 0x06000028 RID: 40 RVA: 0x0000295B File Offset: 0x00000B5B
		public void AddFire(string username = "me")
		{
			this.SendLuaScript("Instance.new(\"Fire\", game:GetService(\"Players\").LocalPlayer.Character.HumanoidRootPart)");
		}

		// Token: 0x06000029 RID: 41 RVA: 0x00002968 File Offset: 0x00000B68
		public void RemoveFire(string username = "me")
		{
			this.SendLuaScript("game:GetService(\"Players\").LocalPlayer.Character.HumanoidRootPart.Fire:Destroy()");
		}

		// Token: 0x0600002A RID: 42 RVA: 0x00002975 File Offset: 0x00000B75
		public void AddSparkles(string username = "me")
		{
			this.SendLuaScript("Instance.new(\"Sparkles\", game:GetService(\"Players\").LocalPlayer.Character.HumanoidRootPart)");
		}

		// Token: 0x0600002B RID: 43 RVA: 0x00002982 File Offset: 0x00000B82
		public void RemoveSparkles(string username = "me")
		{
			this.SendLuaScript("game:GetService(\"Players\").LocalPlayer.Character.HumanoidRootPart.Sparkles:Destroy()");
		}

		// Token: 0x0600002C RID: 44 RVA: 0x0000298F File Offset: 0x00000B8F
		public void AddSmoke(string username = "me")
		{
			this.SendLuaScript("Instance.new(\"Smoke\", game:GetService(\"Players\").LocalPlayer.Character.HumanoidRootPart)");
		}

		// Token: 0x0600002D RID: 45 RVA: 0x0000299C File Offset: 0x00000B9C
		public void RemoveSmoke(string username = "me")
		{
			this.SendLuaScript("game:GetService(\"Players\").LocalPlayer.Character.HumanoidRootPart.Smoke:Destroy()");
		}

		// Token: 0x0600002E RID: 46 RVA: 0x000029A9 File Offset: 0x00000BA9
		public void DoBlockHead(string username = "me")
		{
			this.SendLuaScript("game:GetService(\"Players\").LocalPlayer.Character.Head.Mesh:Destroy()");
		}

		// Token: 0x0600002F RID: 47 RVA: 0x000029B6 File Offset: 0x00000BB6
		public void ConsolePrint(string text = "")
		{
			this.SendLuaScript("rconsoleprint " + text);
		}

		// Token: 0x06000030 RID: 48 RVA: 0x000029C9 File Offset: 0x00000BC9
		public void ConsoleWarn(string text = "")
		{
			this.SendLuaScript("rconsolewarn " + text);
		}

		// Token: 0x06000031 RID: 49 RVA: 0x000029DC File Offset: 0x00000BDC
		public void ConsoleError(string text = "")
		{
			this.SendLuaScript("rconsoleerr " + text);
		}

		// Token: 0x06000032 RID: 50 RVA: 0x000029EF File Offset: 0x00000BEF
		public void SetWalkSpeed(string username = "me", int value = 100)
		{
			this.SendLuaScript("game:GetService(\"Players\").LocalPlayer.Character.Humanoid.WalkSpeed = " + value.ToString());
		}

		// Token: 0x06000033 RID: 51 RVA: 0x00002A08 File Offset: 0x00000C08
		public void ToggleClickTeleport()
		{
			this.SendLuaScript("loadstring(game:HttpGet(\"https://cdn.wearedevs.net/scripts/Click Teleport.txt\"))()");
		}

		// Token: 0x06000034 RID: 52 RVA: 0x00002A15 File Offset: 0x00000C15
		public void SetFogStart(int value = 0)
		{
			this.SendLuaScript("game:GetService(\"Lighting\").FogStart = " + value.ToString());
		}

		// Token: 0x06000035 RID: 53 RVA: 0x00002A2E File Offset: 0x00000C2E
		public void SetFogEnd(int value = 0)
		{
			this.SendLuaScript("game:GetService(\"Lighting\").FogEnd = " + value.ToString());
		}

		// Token: 0x06000036 RID: 54 RVA: 0x00002A47 File Offset: 0x00000C47
		public void SetJumpPower(int value = 100)
		{
			this.SendLuaScript("game:GetService(\"Players\").LocalPlayer.Character.Humanoid.JumpPower = " + value.ToString());
		}

		// Token: 0x06000037 RID: 55 RVA: 0x00002A60 File Offset: 0x00000C60
		public void TeleportToPlayer(string targetUsername = "me")
		{
			this.SendLuaScript("game:GetService(\"Players\").LocalPlayer.Character:MoveTo(game:GetService(\"Players\"):FindFirstChild(" + targetUsername + ").Character.HumanoidRootPart.Position)");
		}

		// Token: 0x04000001 RID: 1
		private WebClient webClient = new WebClient();

		// Token: 0x04000002 RID: 2
		private ExploitAPI.BasicInject injector = new ExploitAPI.BasicInject();

		// Token: 0x04000003 RID: 3
		private int WRDAPIVersion = 9;

		// Token: 0x04000004 RID: 4
		private string luapipe = "WeAreDevsPublicAPI_Lua";

		// Token: 0x04000005 RID: 5
		private string luacpipe = "WeAreDevsPublicAPI_LuaC";

		// Token: 0x04000006 RID: 6
		private bool updateForceRestart;

		// Token: 0x04000007 RID: 7
		private JObject WRDAPICONFCache;

		// Token: 0x04000008 RID: 8
		private JObject latestDataCache;

		// Token: 0x02000003 RID: 3
		private class BasicInject
		{
			// Token: 0x06000039 RID: 57
			[DllImport("kernel32", CharSet = CharSet.Ansi, SetLastError = true)]
			internal static extern IntPtr LoadLibraryA(string lpFileName);

			// Token: 0x0600003A RID: 58
			[DllImport("kernel32", CharSet = CharSet.Ansi, ExactSpelling = true, SetLastError = true)]
			internal static extern UIntPtr GetProcAddress(IntPtr hModule, string procName);

			// Token: 0x0600003B RID: 59
			[DllImport("kernel32.dll", SetLastError = true)]
			[return: MarshalAs(UnmanagedType.Bool)]
			internal static extern bool FreeLibrary(IntPtr hModule);

			// Token: 0x0600003C RID: 60
			[DllImport("kernel32.dll")]
			internal static extern IntPtr OpenProcess(ExploitAPI.BasicInject.ProcessAccess dwDesiredAccess, [MarshalAs(UnmanagedType.Bool)] bool bInheritHandle, int dwProcessId);

			// Token: 0x0600003D RID: 61
			[DllImport("kernel32.dll", ExactSpelling = true, SetLastError = true)]
			internal static extern IntPtr VirtualAllocEx(IntPtr hProcess, IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);

			// Token: 0x0600003E RID: 62
			[DllImport("kernel32.dll", SetLastError = true)]
			internal static extern bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, byte[] lpBuffer, uint nSize, out UIntPtr lpNumberOfBytesWritten);

			// Token: 0x0600003F RID: 63
			[DllImport("kernel32.dll")]
			internal static extern IntPtr CreateRemoteThread(IntPtr hProcess, IntPtr lpThreadAttributes, uint dwStackSize, UIntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, out IntPtr lpThreadId);

			// Token: 0x06000040 RID: 64
			[DllImport("kernel32.dll", SetLastError = true)]
			internal static extern bool ReadProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, [Out] byte[] lpBuffer, int dwSize, out int lpNumberOfBytesRead);

			// Token: 0x06000041 RID: 65 RVA: 0x00002AB4 File Offset: 0x00000CB4
			public bool InjectDLL()
			{
				if (Process.GetProcessesByName("RobloxPlayerBeta").Length == 0)
				{
					return false;
				}
				Process process = Process.GetProcessesByName("RobloxPlayerBeta")[0];
				byte[] bytes = new ASCIIEncoding().GetBytes(AppDomain.CurrentDomain.BaseDirectory + "exploit-main.dll");
				IntPtr hModule = ExploitAPI.BasicInject.LoadLibraryA("kernel32.dll");
				UIntPtr procAddress = ExploitAPI.BasicInject.GetProcAddress(hModule, "LoadLibraryA");
				ExploitAPI.BasicInject.FreeLibrary(hModule);
				if (procAddress == UIntPtr.Zero)
				{
					return false;
				}
				IntPtr intPtr = ExploitAPI.BasicInject.OpenProcess(ExploitAPI.BasicInject.ProcessAccess.AllAccess, false, process.Id);
				if (intPtr == IntPtr.Zero)
				{
					return false;
				}
				IntPtr intPtr2 = ExploitAPI.BasicInject.VirtualAllocEx(intPtr, (IntPtr)0, (uint)bytes.Length, 12288U, 4U);
				UIntPtr uintPtr;
				IntPtr intPtr3;
				return !(intPtr2 == IntPtr.Zero) && ExploitAPI.BasicInject.WriteProcessMemory(intPtr, intPtr2, bytes, (uint)bytes.Length, out uintPtr) && !(ExploitAPI.BasicInject.CreateRemoteThread(intPtr, (IntPtr)0, 0U, procAddress, intPtr2, 0U, out intPtr3) == IntPtr.Zero);
			}

			// Token: 0x02000004 RID: 4
			[Flags]
			public enum ProcessAccess
			{
				// Token: 0x0400000A RID: 10
				AllAccess = 1050235,
				// Token: 0x0400000B RID: 11
				CreateThread = 2,
				// Token: 0x0400000C RID: 12
				DuplicateHandle = 64,
				// Token: 0x0400000D RID: 13
				QueryInformation = 1024,
				// Token: 0x0400000E RID: 14
				SetInformation = 512,
				// Token: 0x0400000F RID: 15
				Terminate = 1,
				// Token: 0x04000010 RID: 16
				VMOperation = 8,
				// Token: 0x04000011 RID: 17
				VMRead = 16,
				// Token: 0x04000012 RID: 18
				VMWrite = 32,
				// Token: 0x04000013 RID: 19
				Synchronize = 1048576
			}
		}
		
	}
}
